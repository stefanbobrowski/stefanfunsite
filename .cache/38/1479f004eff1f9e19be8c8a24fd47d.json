{"id":"../node_modules/hookrouter/dist/title.js","dependencies":[{"name":"C:\\Users\\stefa\\Desktop\\FutureWebApps\\stefansite\\package.json","includedInParent":true,"mtime":1567708409877},{"name":"C:\\Users\\stefa\\Desktop\\FutureWebApps\\stefansite\\node_modules\\hookrouter\\package.json","includedInParent":true,"mtime":1567633600147},{"name":"react","loc":{"line":8,"column":44},"parent":"C:\\Users\\stefa\\Desktop\\FutureWebApps\\stefansite\\node_modules\\hookrouter\\dist\\title.js","resolved":"C:\\Users\\stefa\\Desktop\\FutureWebApps\\stefansite\\node_modules\\react\\index.js"},{"name":"./isNode","loc":{"line":10,"column":45},"parent":"C:\\Users\\stefa\\Desktop\\FutureWebApps\\stefansite\\node_modules\\hookrouter\\dist\\title.js","resolved":"C:\\Users\\stefa\\Desktop\\FutureWebApps\\stefansite\\node_modules\\hookrouter\\dist\\isNode.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTitle = exports.useTitle = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _isNode = _interopRequireDefault(require(\"./isNode\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar currentTitle = '';\n/**\r\n * This hook will set the window title, when a component gets mounted.\r\n * When the component gets unmounted, the previously used title will be restored.\r\n * @param {string} inString\r\n */\n\nvar useTitle = function useTitle(inString) {\n  currentTitle = inString;\n\n  if (_isNode.default) {\n    return;\n  }\n\n  _react.default.useEffect(function () {\n    var previousTitle = document.title;\n    document.title = inString;\n    return function () {\n      document.title = previousTitle;\n    };\n  });\n};\n/**\r\n * Returns the current window title to be used in a SSR context\r\n * @returns {string}\r\n */\n\n\nexports.useTitle = useTitle;\n\nvar getTitle = function getTitle() {\n  return currentTitle;\n};\n\nexports.getTitle = getTitle;\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/title.js"],"names":["currentTitle","useTitle","inString","isNode","React","useEffect","previousTitle","document","title","getTitle"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAIA,YAAY,GAAG,EAAnB;AAEA;;;;;;AAKO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AACrCF,EAAAA,YAAY,GAAGE,QAAf;;AAEA,MAAGC,eAAH,EAAU;AACT;AACA;;AAEDC,iBAAMC,SAAN,CAAgB,YAAM;AACrB,QAAMC,aAAa,GAAGC,QAAQ,CAACC,KAA/B;AACAD,IAAAA,QAAQ,CAACC,KAAT,GAAiBN,QAAjB;AACA,WAAO,YAAM;AACZK,MAAAA,QAAQ,CAACC,KAAT,GAAiBF,aAAjB;AACA,KAFD;AAGA,GAND;AAOA,CAdM;AAgBP;;;;;;;;AAIO,IAAMG,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAMT,YAAN;AAAA,CAAjB","sourcesContent":["import React from 'react';\r\nimport isNode from './isNode';\r\n\r\nlet currentTitle = '';\r\n\r\n/**\r\n * This hook will set the window title, when a component gets mounted.\r\n * When the component gets unmounted, the previously used title will be restored.\r\n * @param {string} inString\r\n */\r\nexport const useTitle = (inString) => {\r\n\tcurrentTitle = inString;\r\n\r\n\tif(isNode){\r\n\t\treturn;\r\n\t}\r\n\r\n\tReact.useEffect(() => {\r\n\t\tconst previousTitle = document.title;\r\n\t\tdocument.title = inString;\r\n\t\treturn () => {\r\n\t\t\tdocument.title = previousTitle;\r\n\t\t};\r\n\t});\r\n};\r\n\r\n/**\r\n * Returns the current window title to be used in a SSR context\r\n * @returns {string}\r\n */\r\nexport const getTitle = () => currentTitle;\r\n"]}},"error":null,"hash":"a887731e9bda990fb21c378a8b9a189b","cacheData":{"env":{}}}